var c;
var C_WIDTH;
var C_HEIGHT;

var FPS = 60;
var gameEventId;
var fpsClock = new FPSClock();
var delta, time, lastTime = Date.now();
var root=[], renderer, physics, entityManager;

function toggleFPS() {
    clearInterval(gameEventId);
    if(FPS == 30) {
        FPS = 60;
    } else {
        FPS = 30;
    }
    startLoop();
}
function velInc(entity, x, y) {
    var velMax=800;
    return function() {
        entity.vel.addXY(x, y);
        if(entity.vel.x < -velMax) entity.vel.x = -velMax;
        else if(entity.vel.x > velMax) entity.vel.x = velMax;
        else if(entity.vel.y < -velMax) entity.vel.y = -velMax;
        else if(entity.vel.y > velMax) entity.vel.y = velMax;
    };
}
var error = "";
$(document).ready(function() {
    var fps = $("#fps");
    fps.click(toggleFPS);
    var canvas = $("#canvas1");
    C_WIDTH = 720;
    C_HEIGHT = 480;
    c = canvas[0].getContext("2d");
    canvas.focus();
    renderer = new RenderSystem(c);
    physics = new Physics(1000);
    collisionSystem = new CollisionSystem();
    entityManager = new Base.EntityManager();
    var rect = Base.makeRectangle(collisionSystem, 100, 300, 50, 50);
    var v = 40;
    rect.add(new Base.PhysicsComponent(physics), 0);
    rect.add(new Collision.CollisionResponse());
    rect.add(new Base.InputKeyComponent({'a':velInc(rect, -v, 0), 'd':velInc(rect, v, 0),
                                         'w':velInc(rect, 0, -v), 's':velInc(rect, 0, v)}), 0);
            this.fps = 10 / this.time;
            this.time = 0;
            return this.fps;
        } else {
            return this.fps;
        }
    }
}