var Shapes = {
    // Segments passed in clockwise order
    Poly: function(segments, color) {
        Entity.call(this);
        this.color = color || "#000";
        this.segments = segments;
        this.draw = function(c) {
            c.fillStyle = this.color;
            c.beginPath();
            c.moveTo(segments[0].p1.x, segments[0].p1.y);
            this.segments.forEach(function(seg) {
                c.lineTo(seg.p2.x, seg.p2.y);
            });
            c.closePath();
            c.fill();
        };
        this.move = function(dist) {
            this.segments.forEach(function(seg) {
                seg.p1.add(dist);
                seg.p2.add(dist);
            });
        }
    },
    /* Segments passed as such:
     *
     *  # 0 #
     *  3   1
     *  # 2 #
     */
    Rectangle: function(segments, color) {
        Shapes.Poly.call(this, segments, color);
        this.x = segments[0].p1.x;
        this.y = segments[0].p1.y;
        this.w = segments[0].p2.x - this.x;
        this.h = segments[0].p2.y - segments[1].p2.y;
        this.draw = function(c) {
            c.fillStyle = this.color;
	        c.fillRect(this.x, this.y, this.w, this.h);
        };
        this.move = function(dist) {
            this.segments.forEach(function(seg) {
                seg.p1.add(dist);
                seg.p2.add(dist);
            });
            this.reset();
        };
        this.collisionClamp = function() {
            var 
        };
        this.reset = function() {
            this.x = segments[0].p1.x;
            this.y = segments[0].p1.y;
            this.w = segments[0].p2.x - this.x;
            this.h = segments[0].p2.y - segments[1].p2.y;
        }
    }
}
EXTEND(Shapes.Poly, Entity);
EXTEND(Shapes.Rectangle, Shapes.Poly);